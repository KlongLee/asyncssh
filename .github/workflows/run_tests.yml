name: Run tests
on: [push, pull_request]

jobs:
  run-tests:
    name: Run tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        include:
          - os: macos-latest
            python-version: "3.10"
            openssl-version: "3"
          - os: macos-latest
            python-version: "3.11"
            openssl-version: "3"
        exclude:
          # test hangs on these combination
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"

    runs-on: ${{ matrix.os }}
    env:
      liboqs_version: '0.7.2'

    steps:
      - name: Checkout asyncssh
        uses: actions/checkout@v3
        with:
          path: asyncssh

      - name: Checkout liboqs
        if: ${{ runner.os != 'macOS' }}
        uses: actions/checkout@v3
        with:
          repository: open-quantum-safe/liboqs
          ref: ${{ env.liboqs_version }}
          path: liboqs

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Determine pip cache path
        shell: bash
        run: |
          echo "_PIP_CACHE_DIR=$(pip cache dir)" >> $GITHUB_ENV

      - name: Set up pip cache
        uses: actions/cache@v3
        with:
          path: ${{ env._PIP_CACHE_DIR }}
          key: pip-${{ runner.os }}-${{ hashFiles('asyncssh/setup.py', 'asyncssh/tox.ini') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Determine vcpkg cache path
        if: ${{ runner.os == 'Windows' }}
        id: vcpkg-cache
        shell: pwsh
        run: |
          "archives_dir=${env:LOCALAPPDATA}\vcpkg\archives" >> $env:GITHUB_OUTPUT
          "downloads_dir=${env:VCPKG_INSTALLATION_ROOT}\downloads" >> $env:GITHUB_OUTPUT

      - name: Set up vcpkg cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Windows' }}
        with:
          path: |
            ${{ steps.vcpkg-cache.outputs.archives_dir }}
            ${{ steps.vcpkg-cache.outputs.downloads_dir }}
          key: vcpkg

      - name: Set up ccache for liboqs (Linux)
        uses: hendrikmuhs/ccache-action@v1.2
        if: ${{ runner.os == 'Linux' }}
        with:
          key: liboqs-cache-${{ matrix.os }}

      - name: Install Linux dependencies
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt install -y --no-install-recommends libnettle8 libsodium-dev libssl-dev libkrb5-dev ssh cmake ninja-build

      - name: Install macOS dependencies
        if: ${{ runner.os == 'macOS' }}
        run: brew install nettle liboqs libsodium openssl

      - name: Provide OpenSSL 3
        if: ${{ runner.os == 'macOS' && matrix.openssl-version == '3' }}
        run: echo "/usr/local/opt/openssl@3/bin" >> $GITHUB_PATH

      - name: Install Windows dependencies
        if: ${{ runner.os == 'Windows' }}
        run: vcpkg install libsodium nettle openssl --triplet x64-windows-release

      - name: Install liboqs (Linux)
        if: ${{ runner.os == 'Linux' }}
        working-directory: liboqs
        run: |
          cmake -GNinja -Bbuild . -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_SHARED_LIBS=ON -DOQS_BUILD_ONLY_LIB=ON -DOQS_DIST_BUILD=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache
          cmake --build build
          sudo cmake --install build

      - name: Initialize MSVC environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install liboqs (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        working-directory: liboqs
        run: |
          cmake -GNinja -Bbuild . -DBUILD_SHARED_LIBS=ON -DOQS_BUILD_ONLY_LIB=ON -DOQS_DIST_BUILD=ON
          cmake --build build
          "$pwd\build\bin" >> "$env:GITHUB_PATH"

      - name: Install Python dependencies
        run: pip install tox

      - name: Run tests
        shell: python
        working-directory: asyncssh
        run: |
          import os, sys, platform
          V = sys.version_info
          p = platform.system().lower()
          exit(os.system(f"tox -e py{V.major}{V.minor}-{p} -- -ra"))

      - name: Upload coverage data
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: asyncssh/.coverage.*
          retention-days: 1

  report-coverage:
    name: Report coverage
    runs-on: ubuntu-latest
    needs: run-tests
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.7"
      - uses: actions/download-artifact@v3
        with:
          name: coverage
      - name: Install dependencies
        run: |
          sudo apt install -y sqlite3
          pip install tox
      - name: Report coverage
        run: |
          shopt -s nullglob
          for f in .coverage.*-windows; do
            sqlite3 "$f" "update file set path = replace(path, '\\', '/');"
          done
          tox -e report
      - uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
